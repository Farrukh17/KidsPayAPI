# Generated by Django 2.2.6 on 2019-11-02 06:05

import core.models
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24, verbose_name='Название приложения')),
                ('token', models.CharField(max_length=32, verbose_name='Токен')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('stopped', 'Stopped')], default='active', max_length=12, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Приложение',
                'verbose_name_plural': 'Приложения',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.CharField(max_length=5, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Детский садик')),
                ('logo', models.ImageField(blank=True, default='default_logo.png', null=True, upload_to=core.models.get_logo_upload_folder, verbose_name='Лого')),
                ('bankAccount', models.CharField(blank=True, max_length=20, null=True, verbose_name='Счет')),
                ('taxNumber', models.CharField(blank=True, max_length=9, null=True, verbose_name='ИНН')),
                ('mfo', models.CharField(blank=True, max_length=5, null=True, verbose_name='МФО Банка')),
                ('directorName', models.CharField(max_length=100, verbose_name='Ф.И.О. директора')),
                ('contactDirector', models.CharField(help_text='Например: 998901234567', max_length=12, verbose_name='Контактный номер директора')),
                ('address', models.CharField(max_length=200, verbose_name='Адрес')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('stopped', 'Stopped')], default='active', max_length=12, verbose_name='Статус')),
                ('agreementDocNumber', models.CharField(blank=True, max_length=30, verbose_name='Номер договора')),
                ('repaymentDate', models.SmallIntegerField(default=1, verbose_name='Дата перерасчета')),
            ],
            options={
                'verbose_name': 'Детский садик',
                'verbose_name_plural': 'Детские садики',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, verbose_name='Название группы')),
                ('fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Ежемесячный взнос')),
                ('maxNumberOfChild', models.SmallIntegerField(blank=True, default=20, verbose_name='Максимальное количество детей')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.School', verbose_name='Детский садик')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('firstName', models.CharField(max_length=30, verbose_name='Имя')),
                ('middleName', models.CharField(blank=True, max_length=30)),
                ('lastName', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('enteredDate', models.DateField(default=datetime.datetime.now, verbose_name='Дата вступления')),
                ('father', models.CharField(blank=True, max_length=100, verbose_name='Отец')),
                ('contactFather', models.CharField(blank=True, max_length=12, verbose_name='Контактный телефон отца')),
                ('mother', models.CharField(blank=True, max_length=100, verbose_name='Мать')),
                ('contactMother', models.CharField(blank=True, max_length=12, verbose_name='Контактный телефон матери')),
                ('monthlyFee', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Ежемесячный взнос')),
                ('agreementNumber', models.CharField(max_length=20, verbose_name='Номер и дата договора')),
                ('birthCertificateNumber', models.CharField(default='', max_length=20, verbose_name='Номер свидетельства о рождении')),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Баланс')),
                ('child_number', models.CharField(blank=True, max_length=4, null=True, verbose_name='Воспитанник ID')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.Group', verbose_name='Группа')),
                ('school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.School', verbose_name='Детский садик')),
            ],
            options={
                'verbose_name': 'Воспитанник',
                'verbose_name_plural': 'Воспитанники',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(blank=True, choices=[('superuser', 'SuperUser'), ('admin', 'Admin'), ('director', 'Director'), ('accountant', 'Accountant')], default='admin', max_length=12)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.School')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
